#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_add_swap
source ynh_redis
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)

final_path=$(ynh_app_setting_get --app=$app --key=final_path)
datadir=$(ynh_app_setting_get --app=$app --key=datadir)

db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)

port_api_gateway=$(ynh_app_setting_get --app=$app --key=port_api_gateway)
port_auth=$(ynh_app_setting_get --app=$app --key=port_auth)
port_auth_worker=$(ynh_app_setting_get --app=$app --key=port_auth_worker)
port_files=$(ynh_app_setting_get --app=$app --key=port_files)
port_syncing_server=$(ynh_app_setting_get --app=$app --key=port_syncing_server)
port_syncing_server_worker=$(ynh_app_setting_get --app=$app --key=port_syncing_server_worker)

redis_db=$(ynh_app_setting_get --app=$app --key=redis_db)

jwt_secret=$(ynh_app_setting_get --app=$app --key=jwt_secret)
legacy_jwt_secret=$(ynh_app_setting_get --app=$app --key=legacy_jwt_secret)
auth_jwt_secret=$(ynh_app_setting_get --app=$app --key=auth_jwt_secret)
pseudo_key_params_key=$(ynh_app_setting_get --app=$app --key=pseudo_key_params_key)
encryption_server_key=$(ynh_app_setting_get --app=$app --key=encryption_server_key)
valet_token_secret=$(ynh_app_setting_get --app=$app --key=valet_token_secret)

syncing_server_version_installed=$(ynh_app_setting_get --app=$app --key=syncing_server_version)
auth_version_installed=$(ynh_app_setting_get --app=$app --key=auth_version)
api_gateway_version_installed=$(ynh_app_setting_get --app=$app --key=api_gateway_version)

config_api_gateway="$final_path/live/api-gateway.env"
config_auth="$final_path/live/auth.env"
config_auth_worker="$final_path/live/auth-worker.env"
config_files="$final_path/live/files.env"
config_syncing_server="$final_path/live/syncing-server.env"
config_syncing_server_worker="$final_path/live/syncing-server-worker.env"

nodejs_version_installed=$(ynh_app_setting_get --app=$app --key=nodejs_version)

#=================================================
# CHECK VERSION
#=================================================

### This helper will compare the version of the currently installed app and the version of the upstream package.
### $upgrade_type can have 2 different values
### - UPGRADE_APP if the upstream app version has changed
### - UPGRADE_PACKAGE if only the YunoHost package has changed
### ynh_check_app_version_changed will stop the upgrade if the app is up to date.
### UPGRADE_APP should be used to upgrade the core app only if there's an upgrade to do.
upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
    # restore it if the upgrade fails
    ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action \
    --service_name="$app-api-gateway" \
    --action="stop" \
    --log_path="/var/log/$app/api-gateway.log"
ynh_systemd_action \
    --service_name="$app-auth" \
    --action="stop" \
    --log_path="/var/log/$app/auth.log"
ynh_systemd_action \
    --service_name="$app-auth-worker" \
    --action="stop" \
    --log_path="/var/log/$app/auth-worker.log"
ynh_systemd_action \
    --service_name="$app-files" \
    --action="stop" \
    --log_path="/var/log/$app/files.log"
ynh_systemd_action \
    --service_name="$app-syncing-server" \
    --action="stop" \
    --log_path="/var/log/$app/syncing-server.log"
ynh_systemd_action \
    --service_name="$app-syncing-server-worker" \
    --action="stop" \
    --log_path="/var/log/$app/syncing-server-worker.log"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
    final_path=/opt/yunohost/$app
    ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# If redis_db doesn't exist, create it
if [ -z "$redis_db" ]; then
    redis_db=$(ynh_redis_get_free_db)
    ynh_app_setting_set --app=$app --key=redis_db --value="$redis_db"
fi


# If port_api_gateway doesn't exist, create it
if [ -z "$port_api_gateway" ]; then
    port_api_gateway=$(ynh_find_port --port=3000)
    ynh_app_setting_set --app=$app --key=port_api_gateway --value=$port_api_gateway
fi
# If port_auth doesn't exist, create it
if [ -z "$port_auth" ]; then
    port_auth=$(ynh_find_port --port=$((port_api_gateway+1)))
    ynh_app_setting_set --app=$app --key=port_auth --value=$port_auth
fi
# If port_auth_worker doesn't exist, create it
if [ -z "$port_auth_worker" ]; then
    port_auth_worker=$(ynh_find_port --port=$((port_auth+1)))
    ynh_app_setting_set --app=$app --key=port_auth_worker --value=$port_auth_worker
fi
# If port_files doesn't exist, create it
if [ -z "$port_files" ]; then
    port_files=$(ynh_find_port --port=$((port_auth_worker+1)))
    ynh_app_setting_set --app=$app --key=port_files --value=$port_files
fi
# If port_syncing_server doesn't exist, create it
if [ -z "$port_syncing_server" ]; then
	port_syncing_server=$(ynh_find_port --port=$((port_files+1)))
    ynh_app_setting_set --app=$app --key=port_syncing_server --value=$port_syncing_server
fi
# If port_syncing_server_worker doesn't exist, create it
if [ -z "$port_syncing_server_worker" ]; then
    port_syncing_server_worker=$(ynh_find_port --port=$((port_syncing_server+1)))
    ynh_app_setting_set --app=$app --key=port_syncing_server_worker --value=$port_syncing_server_worker
fi


# If jwt_secret doesn't exist, create it
if [ -z "$jwt_secret" ]; then
    jwt_secret=$(ynh_string_random --length=48 | base64)
    ynh_app_setting_set --app=$app --key=jwt_secret --value=$jwt_secret
fi
# If legacy_jwt_secret doesn't exist, create it
if [ -z "$legacy_jwt_secret" ]; then
    legacy_jwt_secret=$(ynh_string_random --length=48 | base64)
    ynh_app_setting_set --app=$app --key=legacy_jwt_secret --value=$legacy_jwt_secret
fi
# If auth_jwt_secret doesn't exist, create it
if [ -z "$auth_jwt_secret" ]; then
    auth_jwt_secret=$(ynh_string_random --length=48 | base64)
    ynh_app_setting_set --app=$app --key=auth_jwt_secret --value=$auth_jwt_secret
fi
# If pseudo_key_params_key doesn't exist, create it
if [ -z "$pseudo_key_params_key" ]; then
    pseudo_key_params_key=$(ynh_string_random --length=48 | base64)
    ynh_app_setting_set --app=$app --key=pseudo_key_params_key --value=$pseudo_key_params_key
fi
# If encryption_server_key doesn't exist, create it
if [ -z "$encryption_server_key" ]; then
    encryption_server_key=$(hexdump -n 32 -e '4/4 "%08X"' /dev/random) # 32bytes hex key is required
    ynh_app_setting_set --app=$app --key=encryption_server_key --value=$encryption_server_key
fi
# If valet_token_secret doesn't exist, create it
if [ -z "$valet_token_secret" ]; then
    valet_token_secret=$(ynh_string_random --length=48 | base64)
    ynh_app_setting_set --app=$app --key=valet_token_secret --value=$valet_token_secret
fi


# Remove old Settings, Services, Files, Dependencies
# If final_path_www exist, delete it
final_path_www=$(ynh_app_setting_get --app=$app --key=final_path_www)
if [ -n ${final_path_www+x} ]; then
    ynh_app_setting_delete --app=$app --key=final_path_www
fi
# If final_path_extensions exist, delete it
final_path_extensions=$(ynh_app_setting_get --app=$app --key=final_path_extensions)
if [ -n ${final_path_extensions+x} ]; then
    ynh_app_setting_delete --app=$app --key=final_path_extensions
fi

# If permission help exists, delete it
if ynh_permission_exists --permission="help"
then
	ynh_permission_delete --permission="help"
fi

# If old service exsits; remove it
if ynh_exec_warn_less yunohost service status "$app-syncing-server-js" >/dev/null
then
    ynh_script_progression --message="Removing old service..."  --weight=1
    yunohost service remove "$app-syncing-server-js"
fi
if ynh_exec_warn_less yunohost service status "$app-syncing-server-js-worker" >/dev/null
then
    ynh_script_progression --message="Removing old service..."  --weight=1
    yunohost service remove "$app-syncing-server-js-worker"
fi


# Remove unneeded data
if [ -e "/var/www/$app" ]; then
    ynh_secure_remove --file="/var/www/$app"
fi

# If datadir doesn't exist, create it
# CREATE DATA DIRECTORY
if [ -z "$datadir" ]; then
    datadir=/home/yunohost.app/$app
    ynh_app_setting_set --app=$app --key=datadir --value=$datadir

    mkdir -p $datadir/uploads

    chmod -R 750 "$datadir"
    chmod -R o-rwx "$datadir"
    chown -R $app:$app "$datadir"
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir=$final_path

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
    ynh_script_progression --message="Upgrading source files..." --weight=1

    # Download, check integrity, uncompress and patch the source from app.src
    ynh_secure_remove --file="$final_path/live"
    mkdir -p "$final_path/live"
    ynh_setup_source --source_id=app --dest_dir="$final_path/live"

    chmod 750 "$final_path"
    chmod -R o-rwx "$final_path"
    chown -R $app:$app "$final_path"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=1

# Remove old nodejs version
if [[ "$nodejs_version_installed" < "$NODEJS_VERSION" && -n "$nodejs_version_installed" ]]
then
	ynh_remove_nodejs
fi

ynh_install_app_dependencies $pkg_dependencies
ynh_install_nodejs --nodejs_version=$NODEJS_VERSION
ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key="https://dl.yarnpkg.com/debian/pubkey.gpg"

#=================================================
# SPECIFIC UPGRADE
#=================================================
#=================================================
# ADD SWAP
#=================================================
ynh_script_progression --message="Adding swap..."

ynh_add_swap --size=$swap_needed

#=================================================
# MODIFY A CONFIG FILE
#=================================================
ynh_script_progression --message="Modify a config file..."  --weight=2

ynh_add_config --template="env_api-gateway.env.sample" --destination="$config_api_gateway"
ynh_add_config --template="env_auth.env.sample" --destination="$config_auth"
ynh_add_config --template="env_auth-worker.env.sample" --destination="$config_auth_worker"
ynh_add_config --template="env_files.env.sample" --destination="$config_files"
ynh_add_config --template="env_syncing-server.env.sample" --destination="$config_syncing_server"
ynh_add_config --template="env_syncing-server-worker.env.sample" --destination="$config_syncing_server_worker"

#=================================================
# INSTALLING Standard Notes - Syncing Server
#=================================================
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
    ynh_script_progression --message="Installing Standard Notes - Syncing Server..."  --weight=93
    ynh_use_nodejs
    pushd "$final_path/live"
        #ynh_exec_warn_less ynh_exec_as $app env NODE_OPTIONS="--max-old-space-size=$node_max_old_space_size" PATH=$ynh_node_load_PATH yarn install --pure-lockfile
        #ynh_exec_warn_less ynh_exec_as $app env NODE_OPTIONS="--max-old-space-size=$node_max_old_space_size" PATH=$ynh_node_load_PATH yarn build
        ynh_exec_warn_less ynh_exec_as $app PATH=$ynh_node_load_PATH yarn install --immutable
        ynh_exec_warn_less ynh_exec_as $app PATH=$ynh_node_load_PATH yarn build
    popd
fi

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config --service="$app-api-gateway" --template="systemd_api-gateway.service"
ynh_add_systemd_config --service="$app-auth" --template="systemd_auth.service"
ynh_add_systemd_config --service="$app-auth-worker" --template="systemd_auth-worker.service"
ynh_add_systemd_config --service="$app-files" --template="systemd_files.service"
ynh_add_systemd_config --service="$app-syncing-server" --template="systemd_syncing-server.service"
ynh_add_systemd_config --service="$app-syncing-server-worker" --template="systemd_syncing-server-worker.service"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================
ynh_script_progression --message="Storing the config file checksum..." --weight=1

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum --file="$config_api_gateway"
ynh_store_file_checksum --file="$config_auth"
ynh_store_file_checksum --file="$config_auth_worker"
ynh_store_file_checksum --file="$config_files"
ynh_store_file_checksum --file="$config_syncing_server"
ynh_store_file_checksum --file="$config_syncing_server_worker"
ynh_store_file_checksum --file="/etc/nginx/conf.d/$domain.d/$app.conf"

#=================================================
# GENERIC FINALIZATION
#=================================================
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

mkdir -p "/var/log/$app"
chown -R "$app": "/var/log/$app"

# Use logrotate to manage application logfile(s)
ynh_use_logrotate --logfile="/var/log/$app/api-gateway.log"
ynh_use_logrotate --logfile="/var/log/$app/auth.log"
ynh_use_logrotate --logfile="/var/log/$app/auth-worker.log"
ynh_use_logrotate --logfile="/var/log/$app/files.log"
ynh_use_logrotate --logfile="/var/log/$app/syncing-server.log"
ynh_use_logrotate --logfile="/var/log/$app/syncing-server-worker.log"

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrate $app service in Yunohost..."  --weight=1

yunohost service add "$app-api-gateway" --description="Standard Notes - API Gateway" --log="/var/log/$app/api-gateway.log"
yunohost service add "$app-auth" --description="Standard Notes - Auth" --log="/var/log/$app/auth.log"
yunohost service add "$app-auth-worker" --description="Standard Notes - Auth - Worker" --log="/var/log/$app/auth-worker.log"
yunohost service add "$app-files" --description="Standard Notes - Files" --log="/var/log/$app/files.log"
yunohost service add "$app-syncing-server" --description="Standard Notes - Syncing Server" --log="/var/log/$app/syncing-server.log"
yunohost service add "$app-syncing-server-worker" --description="Standard Notes - Syncing Server - Worker" --log="/var/log/$app/syncing-server-worker.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

# Start a systemd service
ynh_systemd_action \
    --service_name="$app-api-gateway" \
    --action="start" \
    --log_path="/var/log/$app/api-gateway.log" \
    --line_match='^.*Server started on port.*$|^.*Starting worker.*$'
ynh_systemd_action \
    --service_name="$app-auth" \
    --action="start" \
    --log_path="/var/log/$app/auth.log" \
    --line_match='^.*Server started on port.*$|^.*Starting worker.*$'
ynh_systemd_action \
    --service_name="$app-auth-worker" \
    --action="start" \
    --log_path="/var/log/$app/auth-worker.log" \
    --line_match='^.*Server started on port.*$|^.*Starting worker.*$'
ynh_systemd_action \
    --service_name="$app-files" \
    --action="start" \
    --log_path="/var/log/$app/files.log" \
    --line_match='^.*Server started on port.*$|^.*Starting worker.*$'
ynh_systemd_action \
    --service_name="$app-syncing-server" \
    --action="start" \
    --log_path="/var/log/$app/syncing-server.log" \
    --line_match='^.*Server started on port.*$|^.*Starting worker.*$'
ynh_systemd_action \
    --service_name="$app-syncing-server-worker" \
    --action="start" \
    --log_path="/var/log/$app/syncing-server-worker.log" \
    --line_match='^.*Server started on port.*$|^.*Starting worker.*$'

#=================================================
# SETUP FAIL2BAN
#=================================================
ynh_script_progression --message="Reconfiguring fail2ban..." --weight=1

# Create a dedicated fail2ban config
ynh_add_fail2ban_config --use_template

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# STORE SETTINGS
#=================================================
ynh_app_setting_set --app=$app --key=standalone --value="true"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
