#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# RETRIEVE ARGUMENTS
#=================================================

old_domain=$YNH_APP_OLD_DOMAIN
old_path=$YNH_APP_OLD_PATH

new_domain=$YNH_APP_NEW_DOMAIN
new_path=$YNH_APP_NEW_PATH

app=$YNH_APP_INSTANCE_NAME

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

# Needed for helper "ynh_add_nginx_config"
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
port=$(ynh_app_setting_get --app=$app --key=port)
access_domain=$(ynh_app_setting_get --app=$app --key=access_domain)
mail=$(ynh_app_setting_get --app=$app --key=mail)

# Add settings here as needed by your application
#db_name=$(ynh_app_setting_get --app=$app --key=db_name)
#db_user=$db_name
#db_pwd=$(ynh_app_setting_get --app=$app --key=db_pwd)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before changing its url (may take a while)..." --weight=33

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
    # Remove the new domain config file, the remove script won't do it as it doesn't know yet its location.
    ynh_secure_remove --file="/etc/nginx/conf.d/$new_domain.d/$app.conf"

    # restore it if the upgrade fails
    ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK WHICH PARTS SHOULD BE CHANGED
#=================================================

change_domain=0
if [ "$old_domain" != "$new_domain" ]
then
    change_domain=1
fi

change_path=0
if [ "$old_path" != "$new_path" ]
then
    change_path=1
fi

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --log_path="/var/log/$app/$app.log"

#=================================================
# MODIFY URL IN NGINX CONF
#=================================================
ynh_script_progression --message="Updating nginx web server configuration..." --weight=2

nginx_conf_path=/etc/nginx/conf.d/$old_domain.d/$app.conf

# Change the path in the nginx config file
if [ $change_path -eq 1 ]
then
    # Make a backup of the original nginx config file if modified
    ynh_backup_if_checksum_is_different --file="$nginx_conf_path"
    # Set global variables for nginx helper
    domain="$old_domain"
    path_url="$new_path"
    # Create a dedicated nginx config
    ynh_add_nginx_config "\
        port \
        access_domain\
        "
fi

# Change the domain for nginx
if [ $change_domain -eq 1 ]
then
    # Delete file checksum for the old conf file location
    ynh_delete_file_checksum --file="$nginx_conf_path"
    mv $nginx_conf_path /etc/nginx/conf.d/$new_domain.d/$app.conf
    # Store file checksum for the new config file location
    ynh_store_file_checksum --file="/etc/nginx/conf.d/$new_domain.d/$app.conf"
fi

#=================================================
# SPECIFIC MODIFICATIONS
#=================================================
ynh_script_progression --message="Modifying a config file..." --weight=1

config_file="$final_path/live/.env"
ynh_replace_string --match_string="RAILS_RELATIVE_URL_ROOT=$old_path" --replace_string="RAILS_RELATIVE_URL_ROOT=$new_path" --target_file="$config_file"

if [ $change_domain -eq 1 ]
then
    new_mail="$app@$new_domain"
    ynh_replace_string --match_string="$mail" --replace_string="$new_mail" --target_file="$final_path/live/app/mailers/application_mailer.rb"
fi
ynh_replace_string --match_string="$old_domain$old_path" --replace_string="$new_domain$new_path" --target_file="$final_path/live/app/views/user_mailer/welcome.html.erb"

#=================================================
# Modify Standard Notes - Extensions
#=================================================
ynh_script_progression --message="Modify Standard Notes - Extensions..."  --weight=1

if [ $new_path = "/" ]
then
    path=""
else
    path=$new_path
fi

find "$final_path/live/public/extensions/src/" -name "*.json" -print0 | while read -d $'\0' file
do
    ynh_replace_string --match_string='"url": "https://.*/extensions/src/' --replace_string='"url": "https://$domain$path/extensions/src/' --target_file="$file"
done

#=================================================
# SETUP FAIL2BAN
#=================================================
ynh_script_progression --message="Configuring fail2ban..." --weight=1

domain=$new_domain
path_url=$new_path
# Create a dedicated fail2ban config
touch "/var/log/$app/$app.log"
ynh_add_fail2ban_config --use_template --others_var="\
    domain \
    path_url \
    "

#=================================================
# GENERIC FINALISATION
#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=2

ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# WAITING FOR SERVICE
#=================================================
ynh_script_progression --message="Waiting for service..."  --weight=1

is_service_ready

#=================================================
# SEND A README FOR THE ADMIN
#=================================================
ynh_script_progression --message="Sending a readme for the admin..."

admin_panel="https://$(grep portal_domain /etc/ssowat/conf.json | cut -d'"' -f4)/yunohost/admin/#/apps/$app"

config_panel="You can find some specific configurations for this app by using the experimental __URL_TAG1__config-panel feature__URL_TAG2__$admin_panel/config-panel__URL_TAG3__"
admin_mail_info="You changed the url of the server. All Extensions have to be reinstalled by the users. Or you can change the url back."

echo -e "\
Standard Notes - Syncing Server's url was successfully changed.\n\
Please configure the Standard Notes web app or mobile app to use this syning server: https://$domain$path_url/\n\
$config_panel\n\n\
$admin_mail_info\
" > message

ynh_send_readme_to_admin --app_message="message" --type='change_url'

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Change of URL completed for $app" --last
